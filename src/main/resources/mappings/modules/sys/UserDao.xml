<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.sys.dao.UserDao">

	<sql id="userColumns">
		a.id AS "id",
		a.company_id AS "company.id",
		a.office_id AS "office.id",
		a.school_id AS "school.id",
		a.house_id AS "house.id",
		a.credit_worth AS "creditWorth",
		a.sex AS "sex",
		a.birthday AS "birthday",
		a.job AS "job",
		a.login_name AS "loginName",
		a.password AS "password",
		a.no AS "no",
		a.name AS "name",
		a.email AS "email",
		a.phone AS "phone",
		a.mobile AS "mobile",
		a.user_type AS "userType",
		a.photo AS "photo",
		a.login_ip AS "loginIp",
		a.login_date AS "loginDate",
		a.login_flag AS "loginFlag",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"

	</sql>

	<sql id="userJoins">
		LEFT JOIN self_school c ON c.id = a.school_id
	</sql>

	<!-- 根据机构id获得用户列表 -->
	<select id="findTreeList" resultType="User">
		SELECT
		<include refid="userColumns"/>,
		b.name AS "school.name"
		FROM sys_user a,
		(select id,grade,name
		from self_school
		where
		id = #{school.id}
		or
		parent_ids LIKE CONCAT((select parent_ids from  self_school  where id = #{school.id}),#{school.id},'%')
		) b
		where  a.school_id = b.id
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			ORDER BY  b.grade,a.name
			</otherwise>
		</choose>
	</select>

	<select id="findList" resultType="User">
	SELECT
	<include refid="userColumns"/>,
	c.name AS "school.name",
	h.name AS "house.name"
	FROM sys_user a
	<include refid="userJoins"/>
	LEFT JOIN self_house h ON h.id = a.house_id
	<where>
	a.del_flag = #{DEL_FLAG_NORMAL}
	<if test="school != null and school.id != null and school.id != ''">
	AND a.school_id = #{school.id}
	</if>
	<if test="house != null and house.id != null and house.id != ''">
	AND a.house_id = #{house.id}
	</if>
	<if test="creditWorth != null and creditWorth != ''">
	AND a.credit_worth = #{creditWorth}
	</if>
	<if test="loginName != null and loginName != ''">
	AND a.login_name = #{loginName}
	</if>
	<if test="name != null and name != ''">
	AND a.name LIKE
	<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
	<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
	<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
	</if>
	<if test="userType != null and userType != ''">
	AND a.user_type = #{userType}
	</if>
	</where>
	<choose>
	<when test="page !=null and page.orderBy != null and page.orderBy != ''">
	ORDER BY ${page.orderBy}
	</when>
	<otherwise>
	ORDER BY a.update_date DESC
	</otherwise>
	</choose>
	</select>

	<!-- 根据编号获得用户 -->
	<select id="get" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user a
		WHERE a.id = #{id}
	</select>

	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="User" parameterType="User">
		SELECT
			<include refid="userColumns"/>,
		c.name AS "school.name",
		h.name AS "house.name"
		FROM sys_user a
		LEFT JOIN self_house h ON h.id = a.house_id
		LEFT JOIN self_school c ON c.id = a.school_id
		WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
	</select>

	<!-- 根据Id获取用户（树查询school用户时用） -->
	<select id="findUserByOfficeId" resultType="User" useCache="true">
		SELECT
			a.id, a.name, a.login_name
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.school_id = #{school.id}
		ORDER BY a.name
	</select>

	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		ORDER BY a.name
	</select>

	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>

	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO sys_user(
			id,
			company_id,
			office_id,
			school_id,
			house_id,
			credit_worth,
			sex,
			birthday,
			job,
			login_name,
			password,
			no,
			name,
			email,
			phone,
			mobile,
			user_type,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			login_flag,
			photo,
			del_flag
		) VALUES (
			#{id},
			#{company.id},
			#{office.id},
			#{school.id},
			#{house.id},
			#{creditWorth},
			#{sex},
			#{birthday},
			#{job},
			#{loginName},
			#{password},
			#{no},
			#{name},
			#{email},
			#{phone},
			#{mobile},
			#{userType},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{loginFlag},
			#{photo},
			#{delFlag}
		)
	</insert>

	<!-- 更新用户 -->
	<update id="update">
		UPDATE sys_user SET
			company_id = #{company.id},
			office_id = #{office.id},
			school_id = #{school.id},
			house_id = #{house.id},
			credit_worth = #{creditWorth},
			sex = #{sex},
			birthday = #{birthday},
			job = #{job},
			login_name = #{loginName},
			password = #{password},
			no = #{no},
			name = #{name},
			email = #{email},
			phone = #{phone},
			mobile = #{mobile},
			user_type = #{userType},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			login_flag = #{loginFlag},
			photo = #{photo}
		WHERE id = #{id}
	</update>

	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM sys_user_role WHERE user_id = #{id}
	</delete>

	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO sys_user_role(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id}
			<if test="dbName != 'mssql'">
			FROM dual
			</if>
		</foreach>
	</insert>

	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE sys_user SET
			email = #{email},
			phone = #{phone},
			mobile = #{mobile},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			photo = #{photo}
		WHERE id = #{id}
	</update>

	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE sys_user SET
			password = #{password}
		WHERE id = #{id}
	</update>

	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE sys_user SET
			login_ip = #{loginIp},
			login_Date = #{loginDate}
		WHERE id = #{id}
	</update>

	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE sys_user SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>